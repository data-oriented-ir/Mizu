cmake_minimum_required(VERSION 3.21)
project(MizuVM CXX C)

option(MIZU_ENABLE_FFI "Weather or not to enable the Foreign Function Interface." ON)
if(MIZU_ENABLE_FFI)
	option(MIZU_ENABLE_LIB_FFI "Weather or not FFI should be implemented using libFFI (false uses our custom trampoline code)." ON)
endif()
option(MIZU_ENABLE_TRACING "Weather or not operations should print an indicator of their state as they are run." OFF)
option(MIZU_NO_EXCEPTIONS "When enabled Mizu is built without exceptions." OFF)
option(MIZU_BUILD_TESTS "Weather or not the test app should be built." ${PROJECT_IS_TOP_LEVEL})
option(MIZU_BUILD_DOCS "Weather or not the documentation should be built." OFF)
set(MIZU_STACK_SIZE 8.0 CACHE STRING "Size in Kilobytes of Mizu's stack.")
set(MIZU_MAXIMUM_LABEL_SEARCH 1024 CACHE STRING "The number of instructions a find_label instruction is allowed to search in either direction.")

# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")

set(CMAKE_CXX_STANDARD 23)
if(CMAKE_BUILD_TYPE MATCHES DEBUG)
else() # Enable IPO when not in debug mode
	set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()

include(cmake/TargetArch.cmake)
include(cmake/AddFlagIfCompiles.cmake)
target_architecture(MIZU_ARCHITECTURE)

if(MIZU_ENABLE_FFI)
	add_subdirectory(ffi/wasm) # Builds the generator for the wasm side of things
	if(MIZU_ENABLE_LIB_FFI)
		add_subdirectory(ffi/libffi)
	endif()
endif()
if(${MIZU_ARCHITECTURE} STREQUAL wasm32)
	if(EMSCRIPTEN)
		set(CMAKE_EXECUTABLE_SUFFIX ".html")
	endif()
	set(WASM true)
	set(MIZU_ENABLE_HARDWARE_THREADS OFF)
else()
	option(MIZU_ENABLE_HARDWARE_THREADS "If disabled the threading functions are emulated with a coroutine." ON)
	set(WASM false)
endif()

if(${MIZU_ENABLE_HARDWARE_THREADS})
	set(MIZU_DISABLE_HARDWARE_THREADS OFF)
else()
	set(MIZU_DISABLE_HARDWARE_THREADS ON)
endif()

add_library(mizu_vm INTERFACE)
target_include_directories(mizu_vm INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})
target_compile_definitions(mizu_vm INTERFACE MIZU_STACK_SIZE=${MIZU_STACK_SIZE})
target_compile_definitions(mizu_vm INTERFACE MIZU_MAXIMUM_LABEL_SEARCH=${MIZU_MAXIMUM_LABEL_SEARCH})
if(MIZU_ENABLE_FFI AND MIZU_ENABLE_LIB_FFI)
	target_link_libraries(mizu_vm INTERFACE ffi_static)
elseif(MIZU_ENABLE_FFI)
	target_compile_definitions(mizu_vm INTERFACE MIZU_NO_LIB_FFI)
	add_dependencies(mizu_vm trampoline_generator)
else()
	target_compile_definitions(mizu_vm INTERFACE MIZU_NO_LIB_FFI MIZU_NO_FFI)
endif()
if(${MIZU_DISABLE_HARDWARE_THREADS})
	target_compile_definitions(mizu_vm INTERFACE MIZU_NO_HARDWARE_THREADS)
endif()
if(${MIZU_NO_EXCEPTIONS})
	target_compile_definitions(mizu_vm INTERFACE MIZU_NO_EXCEPTIONS)
	add_if_flag_compiles("-fno-exceptions" MIZU_FLAGS_STR)
endif()
if(${MIZU_ENABLE_TRACING})
	target_compile_definitions(mizu_vm INTERFACE MIZU_ENABLE_TRACING)
endif()
add_if_flag_compiles("-mtail-call" MIZU_FLAGS_STR)
string(REPLACE " " ";" MIZU_FLAGS "${MIZU_FLAGS_STR}")

add_subdirectory(thirdparty/libfp)
target_link_libraries(mizu_vm INTERFACE libfp)
target_include_directories(mizu_vm INTERFACE thirdparty)
target_compile_options(mizu_vm INTERFACE ${MIZU_FLAGS})

add_library(mizu::vm ALIAS mizu_vm)

function(add_dynamic_executable NAME)
	if(WIN32)
		add_library(${NAME} SHARED "${ARGN}")
		add_executable(${NAME}_exe "windows.cpp")
		target_link_libraries(${NAME}_exe PUBLIC ${NAME})
	else()
		add_if_flag_compiles("-rdynamic" CMAKE_CXX_FLAGS)
		add_executable(${NAME} "${ARGN}")
	endif()
	target_compile_definitions(${NAME} PUBLIC MIZU_LOAD_CURRENT_EXECUTABLE_PATH="$<TARGET_FILE:${NAME}>")
endfunction()


if(MIZU_BUILD_TESTS)
	add_dynamic_executable(tst "tests/test.cpp")
	target_link_libraries(tst PUBLIC mizu::vm)

	add_library(tst_load SHARED tests/shared.cpp)
endif()

if(MIZU_BUILD_DOCS)
	find_package(Doxygen)
	set(Sphinx_DIR "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
	find_package(Sphinx REQUIRED breathe)

	set(DOXYGEN_GENERATE_HTML NO)
	set(DOXYGEN_GENERATE_XML YES)
	configure_file(Doxyfile Doxyfile.mizu_doxygen)
	doxygen_add_docs(mizu_doxygen CONFIG_FILE ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile.mizu_doxygen)

	sphinx_add_docs(
		mizu_sphinx
		BREATHE_PROJECTS mizu_doxygen
		BUILDER html
		SOURCE_DIRECTORY docs)
endif()